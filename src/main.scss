@mixin glassmorphism {
    background: rgba(255, 255, 255, 0.2);
    box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(5px);
    -webkit-backdrop-filter: blur(5px);
    border: 1px solid rgba(255, 255, 255, 0.3);
}

@mixin glassmorphism-opaque {
    background: rgba(255, 255, 255, 0.6);
    box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(5px);
    -webkit-backdrop-filter: blur(5px);
    border: 1px solid rgba(255, 255, 255, 0.3);
}

@mixin dark-glassmorphism {
    $blur: 14px;
    @content;
    backdrop-filter: blur($blur) saturate(200%);
    -webkit-backdrop-filter: blur($blur) saturate(200%);
    background-color: rgba(17, 25, 40, 0.63);
    border: 1px solid rgba(255, 255, 255, 0.125);
    color: white;
}

@mixin flex {
    display: flex;
    justify-content: center;
    align-items: center;
}

@mixin fade-out {
    -webkit-mask-image: linear-gradient(to top,
            rgba(0, 0, 0, 0),
            rgba(0, 0, 0, 1),
            rgba(0, 0, 0, 1));
    mask-image: linear-gradient(to top,
            rgba(0, 0, 0, 0),
            rgba(0, 0, 0, 1),
            rgba(0, 0, 0, 1));
}

@mixin button {
    all: unset;
    text-decoration: none;
    user-select: none;
    -webkit-user-select: none;
    // Flex
    display: flex;
    justify-content: center;
    align-items: center;
    gap: .2em;

    cursor: pointer;
    background: linear-gradient(60deg,
            $primaryLight,
            adjust-hue($primaryLight, -20));
    outline: none;
    border: none;
    border-radius: 0.5em;
    color: white;
    text-transform: uppercase;
    font-weight: 700;
    box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1),
        0 2px 4px -2px rgb(0 0 0 / 0.1);
    $py: 0.8em;
    $px: 1em;
    padding: $py $px;

    // SVG
    :global(svg) {
        $size: 20px;
        width: $size;
        height: $size;
    }

    &.primary {
        padding: $py calc($px * 1.5);
    }

    border: 2px solid $primaryLight;
    transition: opacity 0.2s ease,
    transform 0.2s ease,
    background-color 0.3s ease,
    border-color 0.2s ease,
    box-shadow 0.3s ease,
    color 0.2s ease,
    border-style 0.5s ease;
    $shadowOpacity: 0.4;

    &:hover {
        opacity: 0.8;
        transform: translateY(-0.1em);
        box-shadow: 0 4px 6px -1px rgb($primaryLight, $shadowOpacity),
            0 2px 4px -2px rgb($primaryLight, $shadowOpacity);
    }

    &.secondary {
        background: transparent;
        border: 2px solid $primaryDark;
        color: $primaryDark;
    }

    &:hover:not(.secondary) {
        color: white;
        border-color: $primaryLight;
    }
}

:global(button) {
    border: none;
    outline: none;
    padding: 0;

    &:focus {
        outline: none
    }
}

$gray: #666;
$background: rgb(20, 20, 20);
$primary: #088;
$secondary: adjust-hue($primary, 30);
$secondaryLight: lighten($secondary, 10);
$secondaryDark: darken($secondary, 10);
$primaryLight: lighten($primary, 10);
$primaryDark: darken($primary, 10);
$monospace_font: monospace;
$font: -apple-system,
BlinkMacSystemFont,
"Segoe UI",
Roboto,
Oxygen-Sans,
Ubuntu,
Cantarell,
"Helvetica Neue",
sans-serif;
$text: rgb(250, 240, 250);

$breakpoints: ('sm': '640px',
    'md': '768px',
    'lg': '1024px',
    'xl': '1280px',
    '2xl': '1536px'
);


// SCSS is beautiful/// Mixin to manage responsive breakpoints
// FROM: https://css-tricks.com/snippets/sass/mixin-manage-breakpoints/
/// @author Kitty Giraudel
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints
@mixin bp($breakpoint) {

    // If the key exists in the map
    @if map-has-key($breakpoints, $breakpoint) {

        // Prints a media query based on the value
        @media (min-width: map-get($breakpoints, $breakpoint)) {
            @content;
        }
    }

    // If the key doesn't exist in the map
    @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. ";
    }
}

@mixin close-button {
    $size: 50px;
    height: $size;
    width: $size;
    box-sizing: border-box;
    line-height: $size;
    display: inline-block;

    &:before,
    &:after {
        $width: 15px;
        $height: 2px;
        transform: rotate(-45deg);
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        margin-top: calc(-1 * $height/2);
        margin-left: calc(-1 * $width/2);
        display: block;
        height: $height;
        width: $width;
        border-radius: 1000px;
        background-color: currentColor;
        transition: all 0.25s ease-out;
    }

    &:after {
        transform: rotate(-135deg);
    }

    &:hover {

        &:before,
        &:after {
            transform: rotate(0deg);
        }
    }
}

@mixin glow_card {
    $border_size: 1px;
    position: relative;

    $border_color: white;
    $background: black;
    background: $background;
    $shadow: rgba(lighten($primary, 25), 0.1);

    transition: box-shadow 0.8s ease;
    box-shadow: 0 0 0 1px $shadow;

    &:hover {
        $opacity: .2;
        box-shadow: 0 10px 15px -3px rgba($shadow, $opacity), 0 4px 6px -4px rgba($shadow, $opacity);
        border-color: $shadow;
    }

    &::before,
    &::after {
        border-radius: inherit;
        transition: opacity 0.3s ease;
    }

    &::before {
        opacity: 0;
        position: absolute;
        inset: calc(-1 * $border-size);
        content: "";
        z-index: -1;
        background: radial-gradient(circle at var(--mouse-x) var(--mouse-y),
                $border_color,
                $background);
    }

    &:hover::before {
        opacity: 1;
    }

    &::after {
        position: absolute;
        inset: calc(-1 * $border-size);
        content: "";
        z-index: -1;
        background: radial-gradient(500px circle at var(--mouse-x) var(--mouse-y),
                $border_color,
                $background);
        opacity: 0.7;
    }
}

:global(.glow_card) {
    @include glow_card;
}

:global(body) {
    font-family: $font;
    color: $text;
}


@mixin card {
    &::before {
        content: "";
        position: absolute;
        inset: -4px;
        border-radius: 0.5rem;
        opacity: 0.2;
        $c: lighten($primary, 20);
        background: linear-gradient(45deg, $c, adjust-hue($c, 30));
        transition: inset 0.3s ease, opacity 0.8s ease;
        display: block;
        padding: 20px;
        z-index: -10;
    }

    &:hover::before {
        inset: -6px;
        opacity: 0.7;
        border-radius: 0.3rem;
    }

    &,
    * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
    }

    font-family: $font;
    position: relative;
    display: flex;
    flex-direction: column;
    border-radius: 0.5rem;
    background: white;
    background-clip: border;
    color: $gray;
    $shadow_color: adjust-hue($primary, -30);
    $size: 10;
    box-shadow: 3px 4px calc($size * 2)+px calc(0 - ($size / 4))+px $shadow_color;

    &:hover {
        $shadow_color: lighten($primary, 20);
        $size: 30;
        box-shadow: 3px 4px calc($size * 2) + px calc(0 - ($size / 4)) + px $shadow_color;
    }
}

@mixin glow {
    $color: $primary;
    @content;
    box-shadow:
        2.8px 2.8px 2.2px rgba($color, 0.02),
        6.7px 6.7px 5.3px rgba($color, 0.028),
        12.5px 12.5px 10px rgba($color, 0.035),
        22.3px 22.3px 17.9px rgba($color, 0.042),
        41.8px 41.8px 33.4px rgba($color, 0.05),
        100px 100px 80px rgba($color, 0.07);
}

@mixin glow_intense {
    $color: $primary;
    @content;
    box-shadow:
        2.2px 1.5px 2.2px rgba($color, 0.096),
        5.3px 3.7px 5.3px rgba($color, 0.137),
        9.9px 6.9px 10px rgba($color, 0.17),
        17.6px 12.3px 17.9px rgba($color, 0.203),
        33px 23px 33.4px rgba($color, 0.244),
        79px 55px 80px rgba($color, 0.34);
}

@mixin glow_sharp {
    $color: $primary;
    @content;
    box-shadow:
        0.1px 0.1px 2.2px rgba($color, 0.096),
        0.3px 0.3px 5.3px rgba($color, 0.137),
        0.6px 0.5px 10px rgba($color, 0.17),
        1.1px 0.9px 17.9px rgba($color, 0.203),
        2.1px 1.7px 33.4px rgba($color, 0.244),
        5px 4px 80px rgba($color, 0.34);
}