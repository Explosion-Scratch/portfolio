@mixin glassmorphism {
    background: rgba(255, 255, 255, 0.2);
    box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(5px);
    -webkit-backdrop-filter: blur(5px);
    border: 1px solid rgba(255, 255, 255, 0.3);
}

@mixin glassmorphism-opaque {
    background: rgba(255, 255, 255, 0.6);
    box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(5px);
    -webkit-backdrop-filter: blur(5px);
    border: 1px solid rgba(255, 255, 255, 0.3);
}

@mixin dark-glassmorphism {
    backdrop-filter: blur(var(--blur, 2px)) saturate(200%);
    -webkit-backdrop-filter: blur(14px) saturate(200%);
    background-color: rgba(17, 25, 40, 0.63);
    border: 1px solid rgba(255, 255, 255, 0.125);
    color: white;
}

@mixin flex {
    display: flex;
    justify-content: center;
    align-items: center;
}

@mixin fade-out {
    -webkit-mask-image: linear-gradient(to top,
            rgba(0, 0, 0, 0),
            rgba(0, 0, 0, 1),
            rgba(0, 0, 0, 1));
    mask-image: linear-gradient(to top,
            rgba(0, 0, 0, 0),
            rgba(0, 0, 0, 1),
            rgba(0, 0, 0, 1));
}

@mixin button {
    all: unset;
    text-decoration: none;
    user-select: none;
    -webkit-user-select: none;
    // Flex
    display: flex;
    justify-content: center;
    align-items: center;
    gap: .2em;

    cursor: pointer;
    background: linear-gradient(60deg,
            $primaryLight,
            adjust-hue($primaryLight, -20));
    outline: none;
    border: none;
    border-radius: 0.5em;
    color: white;
    text-transform: uppercase;
    font-weight: 700;
    box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1),
        0 2px 4px -2px rgb(0 0 0 / 0.1);
    $py: 0.8em;
    $px: 1em;
    padding: $py $px;

    // SVG
    :global(svg) {
        $size: 20px;
        width: $size;
        height: $size;
    }

    &.primary {
        padding: $py calc($px * 1.5);
    }

    border: 2px solid $primaryLight;
    transition: opacity 0.2s ease,
    transform 0.2s ease,
    background-color 0.3s ease,
    border-color 0.2s ease,
    box-shadow 0.3s ease,
    color 0.2s ease,
    border-style 0.5s ease;
    $shadowOpacity: 0.4;

    &:hover {
        opacity: 0.8;
        transform: translateY(-0.1em);
        box-shadow: 0 4px 6px -1px rgb($primaryLight, $shadowOpacity),
            0 2px 4px -2px rgb($primaryLight, $shadowOpacity);
    }

    &.secondary {
        background: transparent;
        border: 2px solid $primaryDark;
        color: $primaryDark;
    }

    &:hover:not(.secondary) {
        color: white;
        border-color: $primaryLight;
    }
}

:global(button) {
    border: none;
    outline: none;
    padding: 0;

    &:focus {
        outline: none
    }
}

$gray: #666;
$background: rgb(20, 20, 20);
$primary: #088;
$secondary: adjust-hue($primary, 30);
$secondaryLight: lighten($secondary, 10);
$secondaryDark: darken($secondary, 10);
$primaryLight: lighten($primary, 10);
$primaryDark: darken($primary, 10);
$monospace_font: monospace;
$font: -apple-system,
BlinkMacSystemFont,
"Segoe UI",
Roboto,
Oxygen-Sans,
Ubuntu,
Cantarell,
"Helvetica Neue",
sans-serif;
$text: rgb(250, 240, 250);

$breakpoints: ('sm': '640px',
    'md': '768px',
    'lg': '1024px',
    'xl': '1280px',
    '2xl': '1536px'
);


// SCSS is beautiful/// Mixin to manage responsive breakpoints
// FROM: https://css-tricks.com/snippets/sass/mixin-manage-breakpoints/
/// @author Kitty Giraudel
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints
@mixin bp($breakpoint) {

    // If the key exists in the map
    @if map-has-key($breakpoints, $breakpoint) {

        // Prints a media query based on the value
        @media (min-width: map-get($breakpoints, $breakpoint)) {
            @content;
        }
    }

    // If the key doesn't exist in the map
    @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. ";
    }
}

@mixin close-button {
    $size: 50px;
    height: $size;
    width: $size;
    box-sizing: border-box;
    line-height: $size;
    display: inline-block;

    &:before,
    &:after {
        $width: 15px;
        $height: 2px;
        transform: rotate(-45deg);
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        margin-top: calc(-1 * $height/2);
        margin-left: calc(-1 * $width/2);
        display: block;
        height: $height;
        width: $width;
        border-radius: 1000px;
        background-color: currentColor;
        transition: all 0.25s ease-out;
    }

    &:after {
        transform: rotate(-135deg);
    }

    &:hover {

        &:before,
        &:after {
            transform: rotate(0deg);
        }
    }
}